Understanding the Kubernetes Ingress:
-------------------------------------

Ingress = Ingress Controller + Ingress Object 


Pre-requisite: An Ingress controller is responsible for fulfilling the Ingress, usually with a load balancer. Only creating an Ingress resource has no effect without an Ingress Controller.

Request Flow:
Browser (User / Client) -> flipkart.com -> DNS name gets resolved -> route53 -> LoadBalancer (Internet Facing)
-> EKS Cluster (Ingress Controllers) -> Ingress Resource / File -> Based on the Ingress file the request is sent to the specific service -> pod

Some popular controllers include:
a.) Ingress-Nginx (Open-Source) Controller for Kubernetes using NGINX as a reverse proxy and load balancer for any Kubernetes Cluster
b.) AWS Load Balancer Controller to manage Application Load Balancers for EKS
c.) AKS Application Gateway Ingress Controller that configures the Azure Application Gateway for AKS
d.) Nginx-Ingress (Enterprise managed by Nginx company)


Ingress is an API object in Kubernetes that manages external access to services within a cluster. It acts as a layer 7 load balancer, providing features like SSL termination, name-based virtual hosting, and path-based routing.

Key features:
- Distributes incoming traffic across multiple backend services.
- Can handle HTTPS traffic by managing certificates.
- Routes requests to different services based on the request hostname.
- Directs requests to different services based on the URL path.
- Allows configuration of routing rules in one place.


handson for Ingress Nginx Controller:
-------------------------------------

- Deploy the Ingress Nginx Controller.
    - Steps to install Ingress Nginx Controller:
    Ingress-Nginx-Controller\Installation-Guide.txt
    https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.3/deploy/static/provider/aws/deploy.yaml
    
- Once this is installed, copy the AWS Network Load Balancer DNS for future reference, using the command:
	- kubectl get services -n ingress-nginx // if installed correctly then it will print the AWS NLB DNS in the external IP
	
- Analyse the sample app in: 
	- manifests\sample-app-for-ingress-nginx.yaml
	
- This file has all the kubernetes objects required for running 2 application / micro-services on kubernetes

- This file also have an ingress object defined which is pointing to nginx ingress controller using following declaration:
	- ingressClassName: nginx
	
- Deploy this file
	- kubectl apply -f manifests\sample-app-for-ingress-nginx.yaml
	
- Verify the application using the NLB DNS copied earlier
	- http://<nlb-dns>/app1
	- http://<nlb-dns>/app2